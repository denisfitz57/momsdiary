  // Save this as `scripts/build-content.mjs` in the root of your project.

  import fs from 'fs';
  import path from 'path';

  // --- CONFIGURATION ---
  // Set the path to the directory where your local .md files are stored.
  // Example: 'C:/Users/YourUser/Documents/MyDiaryMarkdown' or './diaries/md'
  const MARKDOWN_SOURCE_DIR = 'C:/Users/denis/Desktop/diary/combined'; // <-- IMPORTANT: REPLACE THIS
  const DIARY_DATA_PATH = 'src/data/diaryData.ts';
  const OUTPUT_PATH = 'src/data/diaryContent.ts';
  // ---------------------

  function getDiaryEntries() {
    try {
      const dataFileContent = fs.readFileSync(DIARY_DATA_PATH, 'utf-8');
      const match = dataFileContent.match(/export const DIARY_ENTRIES = \[\s*([\s\S]*?)\s*\];/);
      if (!match || !match[1]) {
        throw new Error('Could not find or parse DIARY_ENTRIES in diaryData.ts');
      }
      
      const entriesString = match[1];
      const DIARY_ENTRIES = entriesString
        .split(',')
        .map(line => line.trim())
        .filter(line => line && !line.startsWith('//')) // Ignore commented out lines
        .map(entry => entry.replace(/['"`]/g, '')); // Remove quotes
        
      return DIARY_ENTRIES.filter(Boolean); // Filter out any empty strings that might result from trailing commas
    } catch (error) {
      console.error(`‚ùå Error reading or parsing ${DIARY_DATA_PATH}:`, error);
      process.exit(1);
    }
  }

  function buildContent() {
    if (MARKDOWN_SOURCE_DIR === 'path/to/your/markdown/files' || !MARKDOWN_SOURCE_DIR) {
      console.error('‚ùå Please configure the MARKDOWN_SOURCE_DIR in scripts/build-content.mjs before running.');
      process.exit(1);
    }

    const DIARY_ENTRIES = getDiaryEntries();
    const content = {};
    console.log(`\nReading ${DIARY_ENTRIES.length} markdown files from ${path.resolve(MARKDOWN_SOURCE_DIR)}...`);

    let successCount = 0;
    let failCount = 0;
    const failedEntries = [];

    for (const entry of DIARY_ENTRIES) {
      const filePath = path.join(MARKDOWN_SOURCE_DIR, `${entry}.md`);
      try {
        content[entry] = fs.readFileSync(filePath, 'utf-8');
        successCount++;
        process.stdout.write('.'); // Progress indicator: success
      } catch (error) {
        failCount++;
        failedEntries.push(entry);
        process.stdout.write('F'); // Progress indicator: fail
        content[entry] = `Error: Content for ${entry}.md could not be found.`;
      }
    }
    
    console.log(`\n\nüìä Processed ${DIARY_ENTRIES.length} entries: ${successCount} successful, ${failCount} failed.`);
    if (failCount > 0) {
        console.warn(`\n‚ö†Ô∏è  Warning: Could not read the following files:\n   - ${failedEntries.join('\n   - ')}`);
    }

    const fileContent = `// Auto-generated by scripts/build-content.mjs on ${new Date().toISOString()}\n\nexport const DIARY_CONTENT: Record<string, string> = ${JSON.stringify(content, null, 2)};`;

    fs.writeFileSync(path.resolve(OUTPUT_PATH), fileContent);
    console.log(`\n‚úÖ Diary content bundle created at ${OUTPUT_PATH}`);
  }

  buildContent();

